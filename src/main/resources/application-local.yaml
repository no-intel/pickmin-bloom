version: 0.1.1

spring:
  application:
    name: pickmin-bloom
  datasource:
    url: jdbc:mysql://127.0.0.1:3306/pickmin_bloom?useSSL=false&characterEncoding=UTF-8&serverTimezone=UTC
    username: admin
    password: admin
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        show_sql: true
        format_sql: true
        highlight_sql: true
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_OAUTH_CLIENT_KEY}
            client-secret: ${GOOGLE_OAUTH_SECRET_KEY}
            redirect-uri: "http://localhost:8080/login/oauth2/code/google"
            scope:
              - profile
              - email
  thymeleaf:
    prefix: classpath:/templates/         # Thymeleaf 템플릿 폴더 위치
    suffix: .html                         # Thymeleaf 템플릿 파일 확장자
    mode: HTML5                           # Thymeleaf 처리 모드
    encoding: UTF-8                       # 파일 인코딩 설정
    cache: false                          # 캐싱 비활성화 (개발 시 편리)
    enabled: true
  servlet:
    multipart:
      enabled: true
      max-file-size: 10MB
      max-request-size: 10MB
  hikari:
    minimum-idle: 5             # 유휴 상태로 유지할 최소 커넥션 수
    maximum-pool-size: 10       # 최대 커넥션 수 (RDS 제한 고려!)
    idle-timeout: 600000        # 커넥션 유휴 상태 유지 시간 (ms)
    max-lifetime: 1800000       # 커넥션 생존 최대 시간 (ms)
    connection-timeout: 30000   # 커넥션 획득 시도 타임아웃 (ms)
    pool-name: HikariPool-Pickmin-Bloom # 로깅 시 보이는 풀 이름

logging:
  level:
    com.zaxxer.hikari: INFO  # HikariCP 로그 레벨 (커넥션 풀 상태 확인용)
    org:
      hibernate:
        SQL: DEBUG
        orm:
          jdbc:
            bind: TRACE
            extract: TRACE
aws:
  s3:
    endpoint: http://localhost:4566
    publicBaseUrl: http://localhost:4566/pickmin-post
    region: us-east-1
    bucket:
      post: pickmin-post
    presigned:
      duration: 30
    credentials:
      access-key: test
      secret-key: test
server:
  address: 0.0.0.0
  port: 8080
  servlet:
    session:
      timeout: 1d

management:
  endpoints:
    web:
      exposure:
        include: health, metrics  # 이걸 꼭 설정해야 브라우저/API로 확인 가능

  endpoint:
    health:
      show-details: always       # /health에 세부 정보 표시 (ex: DB 상태 등)

  metrics:
    enable:
      all: true